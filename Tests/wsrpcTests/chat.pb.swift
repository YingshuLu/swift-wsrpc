// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: chat.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Chat_Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seq: UInt64 = 0

  var puin: UInt64 = 0

  var tuin: UInt64 = 0

  var guin: UInt64 = 0

  var at: Int32 = 0

  var mentions: [UInt64] = []

  var type: Int32 = 0

  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Chat_MessageAck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seq: UInt64 = 0

  var puin: UInt64 = 0

  var status: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Chat_Message: @unchecked Sendable {}
extension Chat_MessageAck: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "chat"

extension Chat_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    2: .same(proto: "puin"),
    3: .same(proto: "tuin"),
    4: .same(proto: "guin"),
    5: .same(proto: "at"),
    6: .same(proto: "mentions"),
    7: .same(proto: "type"),
    8: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.seq) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.puin) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.tuin) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.guin) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.at) }()
      case 6: try { try decoder.decodeRepeatedUInt64Field(value: &self.mentions) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seq != 0 {
      try visitor.visitSingularUInt64Field(value: self.seq, fieldNumber: 1)
    }
    if self.puin != 0 {
      try visitor.visitSingularUInt64Field(value: self.puin, fieldNumber: 2)
    }
    if self.tuin != 0 {
      try visitor.visitSingularUInt64Field(value: self.tuin, fieldNumber: 3)
    }
    if self.guin != 0 {
      try visitor.visitSingularUInt64Field(value: self.guin, fieldNumber: 4)
    }
    if self.at != 0 {
      try visitor.visitSingularInt32Field(value: self.at, fieldNumber: 5)
    }
    if !self.mentions.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.mentions, fieldNumber: 6)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 7)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chat_Message, rhs: Chat_Message) -> Bool {
    if lhs.seq != rhs.seq {return false}
    if lhs.puin != rhs.puin {return false}
    if lhs.tuin != rhs.tuin {return false}
    if lhs.guin != rhs.guin {return false}
    if lhs.at != rhs.at {return false}
    if lhs.mentions != rhs.mentions {return false}
    if lhs.type != rhs.type {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chat_MessageAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MessageAck"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    2: .same(proto: "puin"),
    3: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.seq) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.puin) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seq != 0 {
      try visitor.visitSingularUInt64Field(value: self.seq, fieldNumber: 1)
    }
    if self.puin != 0 {
      try visitor.visitSingularUInt64Field(value: self.puin, fieldNumber: 2)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chat_MessageAck, rhs: Chat_MessageAck) -> Bool {
    if lhs.seq != rhs.seq {return false}
    if lhs.puin != rhs.puin {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
